
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';

interface BugReport {
  title: string;
  priority: 'high' | 'medium' | 'low';
  browser: string;
  device: string;
  steps: string;
  expected: string;
  actual: string;
  console_errors: string;
  notes: string;
}

const BugReportForm: React.FC = () => {
  const [report, setReport] = useState<BugReport>({
    title: '',
    priority: 'medium',
    browser: '',
    device: '',
    steps: '',
    expected: '',
    actual: '',
    console_errors: '',
    notes: ''
  });

  const [savedReports, setSavedReports] = useState<BugReport[]>([]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setSavedReports(prev => [...prev, { ...report }]);
    
    // Generate markdown report
    const markdown = `# Bug Report: ${report.title}

**Priority**: ${report.priority.toUpperCase()}
**Browser**: ${report.browser}
**Device**: ${report.device}
**Date**: ${new Date().toLocaleDateString()}

## Steps to Reproduce
${report.steps}

## Expected Result
${report.expected}

## Actual Result
${report.actual}

## Console Errors
\`\`\`
${report.console_errors}
\`\`\`

## Additional Notes
${report.notes}

---
*Generated by QFLOW Testing System*`;

    // Copy to clipboard
    navigator.clipboard.writeText(markdown);
    alert('Bug report copied to clipboard!');
    
    // Reset form
    setReport({
      title: '',
      priority: 'medium',
      browser: '',
      device: '',
      steps: '',
      expected: '',
      actual: '',
      console_errors: '',
      notes: ''
    });
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Bug Report Form</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Bug Title</label>
                <Input
                  value={report.title}
                  onChange={(e) => setReport(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="Brief description of the bug"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Priority</label>
                <Select
                  value={report.priority}
                  onValueChange={(value: 'high' | 'medium' | 'low') => 
                    setReport(prev => ({ ...prev, priority: value }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Browser</label>
                <Select
                  value={report.browser}
                  onValueChange={(value) => setReport(prev => ({ ...prev, browser: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select browser" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="chrome">Chrome</SelectItem>
                    <SelectItem value="firefox">Firefox</SelectItem>
                    <SelectItem value="safari">Safari</SelectItem>
                    <SelectItem value="edge">Edge</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Device</label>
                <Select
                  value={report.device}
                  onValueChange={(value) => setReport(prev => ({ ...prev, device: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select device" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="desktop">Desktop</SelectItem>
                    <SelectItem value="mobile">Mobile</SelectItem>
                    <SelectItem value="tablet">Tablet</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Steps to Reproduce</label>
              <Textarea
                value={report.steps}
                onChange={(e) => setReport(prev => ({ ...prev, steps: e.target.value }))}
                placeholder="1. Go to /discovery&#10;2. Click search input&#10;3. Type 'test'&#10;4. Observe error"
                rows={4}
                required
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Expected Result</label>
                <Textarea
                  value={report.expected}
                  onChange={(e) => setReport(prev => ({ ...prev, expected: e.target.value }))}
                  placeholder="What should happen..."
                  rows={3}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Actual Result</label>
                <Textarea
                  value={report.actual}
                  onChange={(e) => setReport(prev => ({ ...prev, actual: e.target.value }))}
                  placeholder="What actually happens..."
                  rows={3}
                  required
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Console Errors (F12 → Console)</label>
              <Textarea
                value={report.console_errors}
                onChange={(e) => setReport(prev => ({ ...prev, console_errors: e.target.value }))}
                placeholder="Paste any JavaScript errors from browser console..."
                rows={3}
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Additional Notes</label>
              <Textarea
                value={report.notes}
                onChange={(e) => setReport(prev => ({ ...prev, notes: e.target.value }))}
                placeholder="Any additional context, screenshots description, etc..."
                rows={2}
              />
            </div>

            <Button type="submit" className="w-full">
              Generate Bug Report (Copies to Clipboard)
            </Button>
          </form>
        </CardContent>
      </Card>

      {/* Saved Reports */}
      {savedReports.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Recent Bug Reports ({savedReports.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {savedReports.map((bug, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-3">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-semibold">{bug.title}</h3>
                    <Badge className={getPriorityColor(bug.priority)}>
                      {bug.priority}
                    </Badge>
                  </div>
                  <div className="text-sm text-gray-600">
                    {bug.browser} • {bug.device}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default BugReportForm;
